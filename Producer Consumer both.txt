a.	Using Semaphores

#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>
#include <pthread.h>
#include <unistd.h>

#define N 5

int count = 0;
int buffer[N];
int in = 0, out = 0;

sem_t mutex, empty, full;

void produce_item(int itemp, int arg) {
    printf("\nproducer %d produced item %d", arg, itemp);
}

void insertItem(int itemp, int arg) {
    buffer[in] = itemp;
    in = (in + 1) % N;
    printf("\nproducer %d inserted item %d", arg, itemp);
}

void *producer(void *arg) {
    while (1) {
        int itemp = rand() % 10;
        produce_item(itemp, (int)(intptr_t)arg);
        printf("\nproducer %d trying to enter into CR", (int)(intptr_t)arg);
        sem_wait(&mutex);
        sem_wait(&empty);
        int x = (int)(intptr_t)arg;
        printf("\nproducer %d entered into CR", x);
        if (count < N) {
            insertItem(itemp, x);
            count++;
            printf("\nproducer %d leaving CR", x);
            sem_post(&full);
            sem_post(&mutex);
        } else {
            printf("\n---Buffer full---");
            sem_post(&full);
            sem_post(&mutex);
        }
        usleep(1000);  // Sleep for a short time to avoid busy-waiting
    }
    return NULL;
}

int removeItem(int arg) {
    int item = buffer[out];
    buffer[out] = 0;
    out = (out + 1) % N;
    printf("\nconsumer %d removed item %d", arg, item);
    return item;
}

void consume_item(int itemc) {
    printf("\nconsumed item %d", itemc);
}

void *consumer(void *arg) {
    int itemc;
    while (1) {
        printf("\nconsumer %d trying to enter into CR", (int)(intptr_t)arg);
        sem_wait(&mutex);
        sem_wait(&full);
        int x = (int)(intptr_t)arg;
        printf("\nconsumer %d entered into CR", x);
        if (count > 0) {
            itemc = removeItem(x);
            count--;
            printf("\nconsumer %d leaving CR", x);
            sem_post(&empty);
            sem_post(&mutex);
        } else {
            printf("\n---Buffer empty---");
            sem_post(&empty);
            sem_post(&mutex);
        }
        usleep(1000);  // Sleep for a short time to avoid busy-waiting
    }
    return NULL;
}

int main() {
    pthread_t p, p1, p2, c;

    sem_init(&mutex, 0, 1);
    sem_init(&empty, 0, N);
    sem_init(&full, 0, 0);

    pthread_create(&p, NULL, producer, (void *)1);
    pthread_create(&p1, NULL, producer, (void *)2);
    pthread_create(&p2, NULL, producer, (void *)3);
    pthread_create(&c, NULL, consumer, (void *)1);

    pthread_join(p, NULL);
    pthread_join(p1, NULL);
    pthread_join(p2, NULL);
    pthread_join(c, NULL);

    sem_destroy(&mutex);
    sem_destroy(&empty);
    sem_destroy(&full);

    return 0;
}


*********************************************************************

b.	 Using Mutexes

#include <pthread.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>


#define MaxItems 5
#define BufferSize 5

int in = 0;
int out = 0;
int buffer[BufferSize];
pthread_mutex_t mutex;

void *producer(void *pno)
{
    int item;
    for (int i = 0; i < MaxItems; i++)
    {
        item = rand();

        pthread_mutex_lock(&mutex);
        while (((in + 1) % BufferSize) == out)
        {
            // Buffer is full, wait for a consumer to consume
            pthread_mutex_unlock(&mutex);
            usleep(1000); // Sleep for a short time to avoid busy-waiting
            pthread_mutex_lock(&mutex);
        }

        buffer[in] = item;
        printf("Producer %d: Insert Item %d at %d\n", *((int *)pno), buffer[in], in);
        in = (in + 1) % BufferSize;

        pthread_mutex_unlock(&mutex);
    }
}

void *consumer(void *cno)
{
    for (int i = 0; i < MaxItems; i++)
    {
        pthread_mutex_lock(&mutex);
        while (in == out)
        {
            // Buffer is empty, wait for a producer to produce
            pthread_mutex_unlock(&mutex);
            usleep(1000); // Sleep for a short time to avoid busy-waiting
            pthread_mutex_lock(&mutex);
        }

        int item = buffer[out];
        printf("Consumer %d: Remove Item %d from %d\n", *((int *)cno), item, out);
        out = (out + 1) % BufferSize;

        pthread_mutex_unlock(&mutex);
    }
}

int main()
{
    pthread_t pro[5], con[5];
    pthread_mutex_init(&mutex, NULL);

    int a[5] = {1, 2, 3, 4, 5};
    for (int i = 0; i < 5; i++)
    {
        pthread_create(&pro[i], NULL, (void *)producer, (void *)&a[i]);
    }
    for (int i = 0; i < 5; i++)
    {
        pthread_create(&con[i], NULL, (void *)consumer, (void *)&a[i]);
    }
    for (int i = 0; i < 5; i++)
    {
        pthread_join(pro[i], NULL);
    }
    for (int i = 0; i < 5; i++)
    {
        pthread_join(con[i], NULL);
    }

    pthread_mutex_destroy(&mutex);

    return 0;
}
