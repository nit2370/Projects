/*
    FIFO Page Replacement Algorithm
*/
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

int pointer;
int faults ,hits;
void print(int frame_size,int frame[])
{
    int i;
    //printf("Printing the Frames: ");
    for(i=0;i<frame_size;i++)
    {
        if(frame[i]==-1)
            printf("- ");
        else
            printf("%d ",frame[i]);
    }

    printf("\n");
}

void add_reference(int frame_size,int frame[], int reference)
{
    int i;
    bool alloted = false;
    for(i=0;i<frame_size;i++)
    {
        if(frame[i]==reference)
        {
            alloted = true;
            printf("  Hit for %d | ", reference);
            hits++;
            break;
        }
        else if(frame[i]==-1)
        {
            alloted = true;
            frame[i] = reference;
            printf("Fault for %d | ", reference);
            faults++;
            break;
        }
    }
    if(alloted == false) //**page replacement is needed** neither hit nor empty slots available
    {
        faults++;
        printf("Fault for %d | ", reference);
        frame[pointer] = reference;
        pointer = (pointer+1)%frame_size;
    }
    print(frame_size, frame);
}

int main()
{
    int frame_size,i,number_of_references;
    printf("Enter frame size: ");
    scanf("%d",&frame_size);
    int frame[frame_size];
    for(i=0;i<frame_size;i++)
    {
        frame[i] = -1;
    }

    print(frame_size,frame);
    
    printf("Enter the number of references: ");
    scanf("%d",&number_of_references);
    int reference[number_of_references];
    printf("Enter the references sequence: ");
    for(i=0;i<number_of_references;i++)
    {
        scanf("%d",&reference[i]);
        add_reference(frame_size,frame,reference[i]);
    }
    printf("\nNumber of faults: %d \nNumber of hits: %d\n",faults,hits );
}

******************************************************************************************************************

/*
    LRU Page Replacement Algorithm
*/

// rs[25]: Array to store the reference string.
// m[10]: Array representing the frames.
// count[10]: Array to store the usage count of each frame.
// flag[25]: Array to track whether a page in the reference string is already in a frame.
// n: Length of the reference string.
// f: Number of frames.
// pf: Counter for page faults.
// next: Counter to assign the usage count for pages.
#include <stdio.h>

void main()
{
	int i, j, k, min, rs[25], m[10], count[10], flag[25], n, f, pf = 0, next = 0;
	printf("Enter the length of the reference string --");
	scanf("%d", &n);

	printf("Enter the reference string -- ");
	for (i = 0; i < n; i++)
	{
		scanf("%d", &rs[i]);
		flag[i] = 0; // Initialize the flag array to 0
	}

	// Input the number of frames
	printf("Enter the number of frames -- ");
	scanf("%d", &f);

	// Initialize count and m arrays
	for (i = 0; i < f; i++)
	{
		count[i] = 0; // Initialize the count array to 0
		m[i] = -1;	  // Initialize the frame array to -1 (no page is currently in the frame)
	}

	// Iterate through the reference string
	for (i = 0; i < n; i++)
	{
		// Check if the current page is already in a frame
		for (j = 0; j < f; j++)
		{
			if (m[j] == rs[i])
			{
				flag[i] = 1;	 // Set flag to 1 indicating the page is in a frame
				count[j] = next; // Update the usage count for the page
				next++;			 // Increment the next counter
			}
		}

		// If the page is not in a frame
		if (flag[i] == 0)
		{
			// Check if there are empty frames
			if (i < f)
			{
				m[i] = rs[i];	 // Allocate the page to an empty frame
				count[i] = next; // Update the usage count for the page
				next++;			 // Increment the next counter
			}
			else
			{
				min = 0;

				// Find the frame with the minimum usage count
				for (j = 0; j < f; j++)
					if (count[min] > count[j])
						min = j;

				m[min] = rs[i];	   // Replace the page in the frame with the minimum usage count
				count[min] = next; // Update the usage count for the page
				next++;			   // Increment the next counter
			}

			pf++; // Increment the page fault counter
		}
		// for (j = 0; j < f; j++)
		// 	printf("%d\t", m[j]);
		// if (flag[i] == 0)
		// 	printf("PF no. -- %d", pf);
		// printf("\n");
	}

	// Output the number of page faults using LRU
	printf("\nThe number of page faults using LRU are %d", pf);
}

*************************************************************************************************************************

/*
    Optimal Page Replacement Algorithm
*/

#include<stdio.h>

int main() {
    // Declare variables
    int no_of_frames, no_of_pages, frames[10], pages[30], temp[10], flag1, flag2, flag3, i, j, k, pos, max, faults = 0;

    // Prompt user for the number of frames
    printf("Enter number of frames: ");
    scanf("%d", &no_of_frames);

    // Prompt user for the number of pages
    printf("Enter number of pages: ");
    scanf("%d", &no_of_pages);

    // Prompt user to enter page reference string
    printf("Enter page reference string: ");

    // Read the page reference string from user input
    for (i = 0; i < no_of_pages; ++i) {
        scanf("%d", &pages[i]);
    }

    // Initialize frames array with -1 indicating empty frames
    for (i = 0; i < no_of_frames; ++i) {
        frames[i] = -1;
    }

    // Iterate through the page reference string
    for (i = 0; i < no_of_pages; ++i) {
        flag1 = flag2 = 0;

        // Check if the page is already in one of the frames
        for (j = 0; j < no_of_frames; ++j) {
            if (frames[j] == pages[i]) {
                flag1 = flag2 = 1;
                break;
            }
        }

        // If the page is not in any frame, find an empty frame
        if (flag1 == 0) {
            for (j = 0; j < no_of_frames; ++j) {
                if (frames[j] == -1) {
                    faults++;
                    frames[j] = pages[i];
                    flag2 = 1;
                    break;
                }
            }
        }

        // If all frames are occupied, find the page with the farthest next use
        if (flag2 == 0) {
            flag3 = 0;

            // Initialize temp array to store next use indices of pages in frames
            for (j = 0; j < no_of_frames; ++j) {
                temp[j] = -1;

                // Find the next use index of each page in frames
                for (k = i + 1; k < no_of_pages; ++k) {
                    if (frames[j] == pages[k]) {
                        temp[j] = k;
                        break;
                    }
                }
            }

            // Find the position of the frame with the farthest next use
            for (j = 0; j < no_of_frames; ++j) {
                if (temp[j] == -1) {
                    pos = j;
                    flag3 = 1;
                    break;
                }
            }

            // If all frames have future uses, find the frame with the farthest next use
            if (flag3 == 0) {
                max = temp[0];
                pos = 0;

                for (j = 1; j < no_of_frames; ++j) {
                    if (temp[j] > max) {
                        max = temp[j];
                        pos = j;
                    }
                }
            }

            // Replace the page in the frame with the farthest next use
            frames[pos] = pages[i];
            faults++;
        }

        // // Print the frames after each iteration
        // printf("\n");

        // for (j = 0; j < no_of_frames; ++j) {
        //     printf("%d\t", frames[j]);
        // }
    }

    // Print the total number of page faults
    printf("\n\nTotal Page Faults = %d", faults);

    return 0;
}
